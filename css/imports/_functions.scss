@import 'configuration';
@import 'variables';

@function dash($value, $prepend: true) {
  @if $value != '' {
    @if $prepend {
      $value: '-#{$value}';
    } @else {
      $value: '#{$value}-';
    }
  }
  @return $value;
}

@function attribute-value($value, $symbol: '~') {
  @if $value != '' {
    $value: '#{$symbol}="#{$value}"';
  }
  @return $value;
}

@function selector($selector, $value: '', $size: '', $selector-suffix: '') {
  @if $size != '' and $value != '' {
    $size: '#{$size}#{$CONFIG_attribute_size_symbol}';
  }

  @if $value != '' {
    @return '[#{$CONFIG_attribute_prefix}#{$selector}#{attribute-value(#{$size}#{$value})}]#{$selector-suffix}';
  } @else {
    @return '[#{$CONFIG_attribute_prefix}#{$selector}]#{$selector-suffix}';
  }
}

@function non-destructive-map-merge($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or (type-of(map-get($result, $key)) != type-of($value)) or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
      $result: map-merge($result, ($key: $value));
    } @else {
      $result: map-merge($result, ($key: non-destructive-map-merge(map-get($result, $key), $value)));
    }
  }
  @return $result;
}

@function margin-calc($i) {
  @return $i * $MARGIN-base;
}

@function color-value($color, $variant: 0, $lighten: true) {
  @if map-has-key($COLORS-all, $color) {
    @if $variant != 0 {
      @if $lighten {
        @return lighten(map-get($COLORS-all, $color), $variant * $COLORS-variant);
      } @else {
        @return darken(map-get($COLORS-all, $color), $variant * $COLORS-variant);
      }
    } @else {
      @return map-get($COLORS-all, $color);
    }
  } @else {
    @return transparent;
  }
}

@function shadow-calc($start, $end: 0, $i: 1) {
  @return (round(($end - $start) / ($CONFIG_logic_max - 1)) * $i) * 1px;
}

@function visible-color($color) {
  @if lightness($color) <= 50 {
    @return $COLOR-light;
  } @else {
    @return $COLOR-dark;
  }
}