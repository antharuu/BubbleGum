@import '../imports/configuration';
@import '../imports/variables';
@import '../imports/functions';
@import '../imports/mixins';

%width-100 {
  width: 100%;
}

%col {
  @extend %width-100;
  min-height: 1px;
  position: relative;
}

%clearfix {
  &:::after {
    clear: both;
    content: '';
    display: table;
  }
}

#{selector('container')} {
  @extend %clearfix;
  margin: 0 auto;
  max-width: 1280px;
  width: 100%;
}

#{selector('footer')} {
  @extend %clearfix;
  max-width: none;
  margin: 0 auto;
  width: 100%;
  background-color: $COLOR-primary;
  padding: $MARGIN-base * 4 $MARGIN-base;
  margin-top: $MARGIN-base * 4;
}

#{selector('row')} {
  @extend %clearfix;
}

@include add-breakpoints using($size) {
  #{selector('container')} {
    &#{selector('container', 'full', $size)} {
      max-width: none;
    }

    &#{selector('container', 'limited', $size)} {
      max-width: 1280px;
    }
  }

  #{selector('has', 'footer', $size)} {
    display: flex;
    height: 100%;
    flex-direction: column;

    > * {
      &:not(#{selector('footer', 'sticky', $size)}) {
        flex: 1 0 auto;
      }
    }

    #{selector('footer', 'sticky', $size)} {
      flex-shrink: 0;
    }
  }


  #{selector('row')} {
    align-content: start;
    align-items: start;
    display: flex;
    flex-wrap: wrap;

    &#{selector('row', 'row', $size)} {
      flex-direction: row;
    }

    &#{selector('row', 'reverse', $size)} {
      flex-direction: row-reverse;
    }

    &#{selector('row', 'col', $size)}, #{selector('row', 'column', $size)} {
      flex-direction: column;

      &#{selector('row', 'reverse', $size)} {
        flex-direction: column-reverse;
      }
    }

    &#{selector('row', 'nowrap', $size)} {
      flex-wrap: nowrap;
    }

    &#{selector('row', 'wrap', $size)} {
      flex-wrap: wrap;
    }

    &#{selector('row', 'wrap-reverse', $size)} {
      flex-wrap: wrap-reverse;
    }
  }

  #{selector('justify', 'start', $size)} {
    justify-content: start;
  }

  #{selector('justify', 'end', $size)} {
    justify-content: end;
  }

  #{selector('justify', 'center', $size)} {
    justify-content: center;
  }

  #{selector('justify', 'between', $size)} {
    justify-content: space-between;
  }

  #{selector('justify', 'around', $size)} {
    justify-content: space-around;
  }

  #{selector('justify', 'evenly', $size)} {
    justify-content: space-evenly;
  }

  #{selector('items', 'stretch', $size)} {
    align-content: normal;
    align-items: stretch;
  }

  #{selector('items', 'start', $size)} {
    align-content: normal;
    align-items: start;
  }

  #{selector('items', 'end', $size)} {
    align-content: normal;
    align-items: end;
  }

  #{selector('items', 'center', $size)} {
    align-content: normal;
    align-items: center;
  }

  #{selector('items', 'baseline', $size)} {
    align-content: normal;
    align-items: baseline;
  }

  #{selector('content', 'start', $size)} {
    align-content: start;
  }

  #{selector('content', 'end', $size)} {
    align-content: end;
  }

  #{selector('content', 'center', $size)} {
    align-content: center;
  }

  #{selector('content', 'between', $size)} {
    align-content: space-between;
  }

  #{selector('content', 'around', $size)} {
    align-content: space-around;
  }

  #{selector('content', 'evenly', $size)} {
    align-content: space-evenly;
  }

  #{selector('content', 'stretch', $size)} {
    align-content: stretch;
  }

  #{selector('self', 'stretch', $size)} {
    align-self: stretch;
  }

  #{selector('self', 'start', $size)} {
    align-self: start;
  }

  #{selector('self', 'end', $size)} {
    align-self: end;
  }

  #{selector('self', 'center', $size)} {
    align-self: center;
  }

  #{selector('self', 'baseline', $size)} {
    align-self: baseline;
  }

  #{selector('col')} {
    position: relative;
    width: 100%;
    padding: 0 $GRID-gutter;

    @for $col from 1 through $GRID-columns {
      &#{selector('col', $col, $size)} {
        width: $col / $GRID-columns * 100%;
      }
      &#{selector('col', 'push-#{$col}', $size)} {
        left: $col / $GRID-columns * 100%;
      }

      &#{selector('col', 'pull-#{$col}', $size)} {
        left: 0 - $col / $GRID-columns * 100%;
      }

      &#{selector('push', $col, $size)} {
        left: $col / $GRID-columns * 100%;
      }

      &#{selector('pull', $col, $size)} {
        left: 0 - $col / $GRID-columns * 100%;
      }
    }
  }
}
