$Grid = {
  columns: 12
  gutters: 30px
  ignored_breakpoint: xs
  breakpoints: {
    xs: 0,
    sm: 580px,
    md: 770px,
    lg: 990px,
    xl: 1280px
  }
}

$Font = {
  family: {
    main: "'Montserrat', sans-serif"
    code: "'Fira code', monospace"
  }
  size: {
    default: 18px
    multiplier: .38
  }
}

$Colors = {
  variants_amount: 3
  variation_amount: 15
  base: {
    'red': #f24236,
    'pink': #e43f6f,
    'purple': #6564db,
    'indigo': #473bf0,
    'blue': #3169c4,
    'cyan': #1fa6c1,
    'teal': #00bfb2,
    'green': #3ccd65,
    'lime': #aad922,
    'yellow': #f7b32b,
    'amber': #ff7f11,
    'orange': #f34213,
    'brown': #823329,
    'grey': #7179ad,
    'black': #1a1d2d,
    'white': #fbfaf8,
    'transparent': transparent
  }
  theme:{
    'dark': #1a1d2d,
    'light': #fbfaf8,
    'primary': #00bfb2,
    'secondary': #7179ad,
    'success': #3ccd65,
    'info': #1fa6c1,
    'warning': #ff7f11,
    'danger': #f24236,
    'muted': #1a1d2d + 40%
  }
  all: {}
  variants: {}
}

$Sizes = {
  margin: {
    base: 5px
    small: 5px
    medium: 15px
    large: 30px
  }
  padding: {
    base: 5px
    small: 5px
    medium: 15px
    large: 30px
  }
  round: {
    base: 5px
    small: 5px
    medium: 15px
    large: 30px
  }
}

$Borders = {
  size: 1px
  type: solid
  default_color: $Colors.theme.muted
}

$Shadows = {
  first: {
    x_min: 0
    x_max: 0
    y_min: 2
    y_max: 24
    blur_min: 2
    blur_max: 38
    spread_min: 0
    spread_max: 3
    color: $Colors.theme.dark
    opacity: .14
  }
  second: {
    x_min: 0
    x_max: 0
    y_min: 3
    y_max: 9
    blur_min: 1
    blur_max: 46
    spread_min: -2
    spread_max: 8
    color: $Colors.theme.dark
    opacity: .12
  }
  third: {
    x_min: 0
    x_max: 0
    y_min: 1
    y_max: 11
    blur_min: 5
    blur_max: 15
    spread_min: 0
    spread_max: -7
    color: $Colors.theme.dark
    opacity: .2
  }
}

$Form = {
  color: $Colors.theme.muted
  color_main: $Colors.theme.primary
  color_font: $Colors.theme.dark
}

$Others = {
  nav:{
    breadcrumb_symbol: '/'
  }
}

// ------------------------------------- Colors generation
$Colors.all = merge($Colors.base, $Colors.theme)

if $Core.use.color_variants {
  for $color-name, $color-base in $Colors.all {
    if $color-name != 'transparent' {
      for $variation in 'light' 'dark' {
        for $i in 1..$Colors.variants_amount {
          $power = ($i * $Colors.variation_amount) / 1%
          if $variation == 'light' {
            $color = $color-base + $power
            $Colors.variants[$color-name + '-light-' + $i] = $color
          } else if $variation == 'dark' {
            $color = $color-base - $power
            $Colors.variants[$color-name + '-dark-' + $i] = $color
          }
        }
      }
    }
  }

  $Colors.all = merge($Colors.all, $Colors.variants)
}

// ------------------------------------- Bundles

$Prism = {
  colors: {
    base: $Colors.theme.light
    background: $Colors.theme.dark
    comment: $Colors.theme.muted
    prolog: $Colors.theme.muted
    doctype: $Colors.theme.muted
    cdata: $Colors.theme.muted
    punctuation: $Colors.theme.light
    tag: $Colors.base.red
    attr-name: $Colors.base.red
    namespace: $Colors.base.red
    deleted: $Colors.base.red
    function-name: $Colors.base.blue
    boolean: $Colors.base.amber
    number: $Colors.base.amber
    function: $Colors.base.amber
    property: $Colors.base.yellow
    class-name: $Colors.base.yellow
    constant: $Colors.base.yellow
    symbol: $Colors.base.yellow
    selector: $Colors.base.pink
    important: $Colors.base.pink
    atrule: $Colors.base.pink
    keyword: $Colors.base.pink
    builtin: $Colors.base.pink
    string: $Colors.base.green
    char: $Colors.base.green
    hexcode: $Colors.base.purple
    attr-value: $Colors.base.green
    regex: $Colors.base.green
    variable: $Colors.base.green
    operator: $Colors.base.blue
    entity: $Colors.base.blue
    url: $Colors.base.blue
    inserted: $Colors.base.green
  }
  tab_size: 4
}