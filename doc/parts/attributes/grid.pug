+add-title('Grid', 'grid')

+add-sub-title('Container', 'grid-container')
p Containers basically take 100% screen width, but are limited to 1280px width by default.
+add-code('html', 'grid_container_1')
p You can however remove or apply this limitation
+add-code('html', 'grid_container_2')
+usages('container', ['', 'full', 'limited'], true)

hr

+add-sub-title('Row', 'grid-row')
p Rows are blocks that use flexboxes and allow your content to fit correctly.
+add-code('html', 'grid_row_1')
p You can use all flex attributes with row, <a href="#display-wrap">see here</a>.
+add-code('html', 'grid_row_2')
+usages('row', [''], true)
hr

+add-sub-title('Columns', 'grid-columns')
p The columns are there to define the width of the elements, you can also use breakpoints to make your site responsive.
+add-code('html', 'grid_columns_1')
p Result:
div(_row='')
    div(_col=12).exemple
        p Full width div

p Basically the width is set to 12columns, but you can redefine it in the configuration file.
+add-code('html', 'grid_columns_2')
p Result:
div(_row='')
    div(_col=5).exemple
        p Column size 5
    div(_col=3).exemple
        p Column size 3
    div(_col=4).exemple
        p Column size 4

p They are more useful when using breakpoints.
+add-code('html', 'grid_columns_3')
p Result:
div(_row='')
    div(_col='sm:10 md:8 lg:6 xl:3').exemple
        p Responsive column
+usages('col', ['', '[1..12]'], true)
hr

+add-sub-title('Footer', 'grid-footer')
p The footer is simple but come with background color and padding
+add-code('html', 'grid_footer_1')
p The sticky footer is more useful but requires a little preparation.
+add-code('html', 'grid_footer_2')
p We recommend to put a container before your content
+add-code('html', 'grid_footer_3')

+usages('footer', ['', 'sticky', '[colors]'], true)